{
  "swagger": "2.0",
  "info": {
    "description": "This is the swagger document for the inMarket M2M CMS.",
    "version": "1.0.0",
    "title": "inMarket M2M CMS",
    "termsOfService": "https://cms.inmarket.com/terms/",
    "contact": {
      "email": "dev@inmarket.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "cms.inmarket.com",
  "basePath": "/v2",
  "tags": [
    {
      "name": "ad",
      "description": "Everything about Ad",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://docs.inmarket.com/cms/ad"
      }
    },
    {
      "name": "ad_html_meta",
      "description": "Everything about AdHtmlMeta",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://docs.inmarket.com/cms/ad_html_meta"
      }
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [

        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/ad": {
      "post": {
        "tags": [
          "ad"
        ],
        "summary": "Add a new ad",
        "description": "",
        "operationId": "addAd",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Ad object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ad"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      }
    },
    "/ad/findByOwnerId": {
      "get": {
        "tags": [
          "ad"
        ],
        "summary": "Find Ad by owner_id",
        "description": "Multiple values can be provided with comma separated strings",
        "operationId": "findAdByOwnerId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner_id",
            "in": "query",
            "description": "OwnerId values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ad"
              }
            }
          },
          "400": {
            "description": "Invalid owner_id value"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      }
    },
    "/ad/{id}": {
      "get": {
        "tags": [
          "ad"
        ],
        "summary": "Find ad by ID",
        "description": "Returns a single Ad",
        "operationId": "getAdById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of ad to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ad"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ad not found"
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ad"
        ],
        "summary": "Update an existing Ad",
        "description": "",
        "operationId": "updateAd",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Ad object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ad"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Ad id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ad not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ad"
        ],
        "summary": "Deletes a ad",
        "description": "",
        "operationId": "deleteAd",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Ad id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Ad not found"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      }
    },
    "/ad_html_meta": {
      "post": {
        "tags": [
          "ad_html_meta"
        ],
        "summary": "Add a new ad_html_meta",
        "description": "",
        "operationId": "addAdHtmlMeta",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "AdHtmlMeta object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdHtmlMeta"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      }
    },
    "/ad_html_meta/findByAdId": {
      "get": {
        "tags": [
          "ad_html_meta"
        ],
        "summary": "Find AdHtmlMeta by ad_id",
        "description": "Multiple values can be provided with comma separated strings",
        "operationId": "findAdHtmlMetaByAdId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "ad_id",
            "in": "query",
            "description": "AdId values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdHtmlMeta"
              }
            }
          },
          "400": {
            "description": "Invalid ad_id value"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      }
    },
    "/ad_html_meta/{id}": {
      "get": {
        "tags": [
          "ad_html_meta"
        ],
        "summary": "Find ad_html_meta by ID",
        "description": "Returns a single AdHtmlMeta",
        "operationId": "getAdHtmlMetaById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of ad_html_meta to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AdHtmlMeta"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "AdHtmlMeta not found"
          }
        },
        "security": [
          {
            "api_key": [

            ]
          }
        ]
      },
      "put": {
        "tags": [
          "ad_html_meta"
        ],
        "summary": "Update an existing AdHtmlMeta",
        "description": "",
        "operationId": "updateAdHtmlMeta",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "AdHtmlMeta object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdHtmlMeta"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "AdHtmlMeta id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "AdHtmlMeta not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "ad_html_meta"
        ],
        "summary": "Deletes a ad_html_meta",
        "description": "",
        "operationId": "deleteAdHtmlMeta",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "AdHtmlMeta id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "AdHtmlMeta not found"
          }
        },
        "security": [
          {
            "m2m_auth": [
              "write:campaigns",
              "read:campaigns"
            ]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "m2m_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://m2mcms.inmarket.com/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:campaigns": "modify campaigns",
        "read:campaigns": "read campaigns"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Ad": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string",
          "maxLength": 255
        },
        "owner_id": {
          "type": "integer",
          "format": "int32"
        },
        "owner_type_id": {
          "type": "integer",
          "format": "int32"
        },
        "creative_type_id": {
          "type": "integer",
          "format": "int32"
        },
        "content": {
          "type": "string",
          "maxLength": 255
        },
        "deeplink": {
          "type": "string",
          "maxLength": 255
        },
        "click_action": {
          "type": "string",
          "maxLength": 255
        },
        "pixels": {
          "type": "string",
          "maxLength": 255
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "update_dtime": {
          "type": "string",
          "format": "date-time"
        },
        "create_dtime": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "owner_id",
        "owner_type_id",
        "creative_type_id",
        "update_dtime",
        "create_dtime"
      ]
    },
    "AdHtmlMeta": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "ad_id": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "scrollable": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "update_dtime": {
          "type": "string",
          "format": "date-time"
        },
        "create_dtime": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "ad_id",
        "scrollable",
        "update_dtime",
        "create_dtime"
      ]
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}